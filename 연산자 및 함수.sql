use practice;

SELECT  *
  FROM  CUSTOMER
 WHERE  GENDER = 'MAN';
 
SELECT  *
  FROM  CUSTOMER
 WHERE  GENDER <> 'MAN';
  
SELECT  *
  FROM  CUSTOMER
 WHERE  YEAR(JOIN_DATE) >= 2020;
 
SELECT  *
  FROM  CUSTOMER
 WHERE  YEAR(JOIN_DATE) <= 2019;
  
SELECT  *
  FROM  CUSTOMER
 WHERE  YEAR(JOIN_DATE) > 2019;
   
SELECT  *
  FROM  CUSTOMER
 WHERE  YEAR(JOIN_DATE) < 2020;
 
SELECT  *
  FROM  CUSTOMER
 WHERE  GENDER = 'MAN'
   AND  ADDR = 'SEOUL';
   
SELECT  *
  FROM  CUSTOMER
 WHERE  NOT GENDER = 'MAN'
   AND  NOT ADDR = 'SEOUL';

SELECT  *
  FROM  CUSTOMER
 WHERE  GENDER = 'MAN'
    OR  ADDR = 'GYEONGGI';

SELECT  *
  FROM  CUSTOMER
 WHERE  YEAR(BIRTHDAY) BETWEEN 1945 AND 1960;
 
SELECT  *
  FROM  CUSTOMER
 WHERE  YEAR(JOIN_DATE) NOT BETWEEN 2020 AND 2021;
 
SELECT  *
  FROM  CUSTOMER
 WHERE  YEAR(JOIN_DATE) IN (2019,2020);
 
SELECT  *
  FROM  CUSTOMER
 WHERE  YEAR(BIRTHDAY) NOT IN (2010,2011);
 
SELECT  *
  FROM  CUSTOMER
 WHERE  ADDR LIKE 'D%'; /* %가 조회값 뒤에 있을 경우 = ~로 시작하는 */
 
SELECT  *
  FROM  CUSTOMER
 WHERE  ADDR LIKE 'S%';
 
SELECT  *
  FROM  CUSTOMER
 WHERE  ADDR LIKE '%U'; /* %가 조회값 앞에 있을 경우 = ~로 끝나는 */
 
SELECT  *
  FROM  CUSTOMER
 WHERE  ADDR LIKE '%O%'; /* %가 조회값 양쪽에 있을 경우 = ~가 포함되는 */
 
SELECT  *
  FROM  CUSTOMER
 WHERE  ADDR NOT LIKE '%D%'; /*%가 조회값 양쪽에 있을 경우 = ~를 제외하는 */
 
SELECT  *
  FROM  CUSTOMER AS A
  LEFT  
  JOIN  SALES AS B
    ON  A.MEM_NO = B.MEM_NO
 WHERE  B.MEM_NO IS NULL;
 
SELECT  *
  FROM  CUSTOMER AS A
  LEFT  
  JOIN  SALES AS B
    ON  A.MEM_NO = B.MEM_NO
 WHERE  B.MEM_NO IS NOT NULL;
 
SELECT  *
  FROM  SALES
 WHERE  MEM_NO  = '1001736';
 
SELECT  *
		,A.SALES_QTY * PRICE AS 결제금액
  FROM  SALES AS A
  LEFT  
  JOIN  PRODUCT AS B
    ON  A.PRODUCT_CODE = B.PRODUCT_CODE;

CREATE TEMPORARY TABLE SALES_2019
SELECT  *
  FROM  SALES
 WHERE  YEAR(ORDER_DATE) = '2019';
 
SELECT  *
  FROM  SALES_2019;
   
SELECT  *
  FROM  SALES;
  
SELECT  *
  FROM  SALES_2019
 UNION  
SELECT  *
  FROM  SALES;
  
SELECT  *
  FROM  SALES_2019
UNION ALL
SELECT  *
  FROM  SALES;
  
SELECT  ABS(- 200);

SELECT  ROUND(2.18, 1);

SELECT  SQRT(9);

SELECT  LOWER('AB');
SELECT  UPPER('ab');

SELECT  LEFT('AB', 1);
SELECT  RIGHT('AB', 1);

SELECT  LENGTH('AB');

SELECT  YEAR('2022-12-31');
SELECT  MONTH('2022-12-31');
SELECT  DAY('2022-12-31');

SELECT  DATE_ADD('2022-12-31', INTERVAL -1 MONTH);

SELECT  DATEDIFF('2022-12-31', '2022-12-30');

SELECT  DATE_FORMAT('2022-12-31', '%m-%d-%y');
SELECT  DATE_FORMAT('2022-12-31', '%M-%D-%Y');

SELECT  CAST('2022-12-31 12:00:00' AS DATE);

SELECT  CAST('2022-12-31 12:00:00' AS TIME);

SELECT  IFNULL(NULL, 0);
SELECT  IFNULL('NULL이 아님', 0);

SELECT  *
		,CASE WHEN GENDER = 'MAN' THEN '남성'
			  ELSE '여성' END
  FROM  CUSTOMER;
  
SELECT  *
		,YEAR(JOIN_DATE) AS 가입연도
        ,LENGTH(YEAR(JOIN_DATE)) AS 가입연도_문자수
  FROM CUSTOMER;
  
SELECT  COUNT(ORDER_NO) AS 구매횟수
		,COUNT(DISTINCT MEM_NO) AS 구매자수
        ,SUM(SALES_QTY) AS 구매수량
        ,AVG(SALES_QTY) AS 평균구매수량
        ,MAX(ORDER_DATE) AS 최근구매일자
        ,MIN(ORDER_DATE) AS 최초구매일자
  FROM  SALES;
  
SELECT  YEAR(JOIN_DATE) AS 가입연도
	    ,ADDR
        ,COUNT(MEM_NO) AS 회원수
  FROM  CUSTOMER
 GROUP  
    BY  YEAR(JOIN_DATE)
		,ADDR
WITH ROLLUP;

SELECT  MEM_NO
	    ,SUM(SALES_QTY) AS 구매수량
  FROM  SALES
 GROUP  
    BY  MEM_NO;
    
SELECT  *
  FROM  SALES
 WHERE  MEM_NO = '1000970';
 
SELECT  ORDER_DATE
	    ,ROW_NUMBER() OVER (ORDER BY ORDER_DATE ASC) AS 고유한_순위_반환
        ,RANK () OVER (ORDER BY ORDER_DATE ASC) AS 동일한_순위_반환
        ,DENSE_RANK () OVER (ORDER BY ORDER_dATE ASC) AS 동일한_순위_반환_하나의등수
  FROM  SALES;
  
SELECT  ORDER_DATE
	    ,ROW_NUMBER() OVER (ORDER BY ORDER_DATE ASC) AS 고유한_순위_반환
        ,RANK () OVER (ORDER BY ORDER_DATE ASC) AS 동일한_순위_반환
        ,DENSE_RANK () OVER (ORDER BY ORDER_dATE ASC) AS 동일한_순위_반환_하나의등수
  FROM  SALES;
  
SELECT  MEM_NO
		,ORDER_DATE
	    ,ROW_NUMBER() OVER (PARTITION BY MEM_NO ORDER BY ORDER_DATE ASC) AS 고유한_순위_반환
        ,RANK () OVER (PARTITION BY MEM_NO ORDER BY ORDER_DATE ASC) AS 동일한_순위_반환
        ,DENSE_RANK () OVER (PARTITION BY MEM_NO ORDER BY ORDER_dATE ASC) AS 동일한_순위_반환_하나의등수
  FROM  SALES;
  
SELECT  ORDER_DATE
	    ,SALES_QTY
        ,'-' AS 구분
        ,COUNT(ORDER_NO) OVER (ORDER BY ORDER_DATE ASC) AS 누적_구매횟수
        ,SUM(SALES_QTY) OVER (ORDER BY ORDER_DATE ASC) AS 누적_구매수량
        ,AVG(SALES_QTY) OVER (ORDER BY ORDER_DATE ASC) AS 평균_구매수량
        ,MAX(SALES_QTY) OVER (ORDER BY ORDER_DATE ASC) AS 누적_가장높은구매수량
        ,MIN(SALES_QTY) OVER (ORDER BY ORDER_DATE ASC) AS 누적_가장낮은구매수량
  FROM  SALES;
  
SELECT  MEM_NO
		,ORDER_DATE
	    ,SALES_QTY
        ,'-' AS 구분
        ,COUNT(ORDER_NO) OVER (PARTITION BY MEM_NO ORDER BY ORDER_DATE ASC) AS 누적_구매횟수
        ,SUM(SALES_QTY) OVER (PARTITION BY MEM_NO ORDER BY ORDER_DATE ASC) AS 누적_구매수량
        ,AVG(SALES_QTY) OVER (PARTITION BY MEM_NO ORDER BY ORDER_DATE ASC) AS 평균_구매수량
        ,MAX(SALES_QTY) OVER (PARTITION BY MEM_NO ORDER BY ORDER_DATE ASC) AS 누적_가장높은구매수량
        ,MIN(SALES_QTY) OVER (PARTITION BY MEM_NO ORDER BY ORDER_DATE ASC) AS 누적_가장낮은구매수량
  FROM  SALES;
